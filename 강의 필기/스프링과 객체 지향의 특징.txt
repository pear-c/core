■ 객체 지향 특징
- 추상화
- 캡슐화
- 상속
- 다형성

■ 객체 지향 프로그래밍
: 객체들의 모임, 객체 간 서로 메세지를 주고 받음(협력)
프로그램을 유연하고 변경 가능하도록 설계 -> 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법 => 다형성

■ 다형성 (역할 : 인터페이스 / 구현 : 구현 클래스 or 구현 객체)
ex)
- 운전자 역할 / 자동차 역할
- 자동차 구현체(K3, 아반떼, 테슬라)

자동차 구현체가 바뀌어도(K3 -> 아반떼) 운전자는 운전 가능.
: 다른 새로운 구현체가 나오더라도 클라이언트(운전자)는 바꾸지 않아도 확장 가능.

ex)
공연 무대 (로미오와 줄리엣)
- 로미오 역할 / 줄리엣 역할
- 남자 배우들(강동원, 원빈) / 여자 배우들(김태희, 송혜교)

* 장점 정리
- 클라이언트는 대상의 역할(인터페이스)만 알면 된다.
- 클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
- 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향 X.
- 클라이언트는 구현 대상 자체를 변경해도 영향 X.

* 자바 언어
- 역할 = 인터페이스
- 구현 = 구현 클래스, 구현 객체

객체 설계 시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기

★다형성의 본질★
클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경 가능 ! 

MemberService() (클라이언트) 가 MemoryMemberRepository() / JdbcMemberRepository() 2개의 리포지토리(서버) 중 유연하게 변경 가능

■ 스프링과 객체 지향
- 다형성이 가장 중요!
- 스프링은 다형성을 극대화해서 이용할 수 있게 도와줌
- 스프링은 레고 블럭을 조립하듯이, 구현을 편리하게 변경할 수 있다.
