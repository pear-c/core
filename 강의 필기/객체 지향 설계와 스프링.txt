■ 객체 지향 설계와 스프링
: 스프링은 다음 기술들로 다형성 + OCP, DIP를 가능하게 지원
- DI : 의존관계, 의존성 주입
- DI 컨테이너 제공
★ - 클라이언트의 코드 변경 없이 기능 확장 



■ 전체 정리
- 모든 설계에 역할과 구현을 분리하자
- 자동차, 공연의 예를 떠올리자.
- 애플리케이션 설계도 공연처럼 배역(역할)만 만들어두고, 배우(구현)은 언제든지 유연하게 변경할 수 있도록 설계하자
- 이상적으로는 모든 설계에 인터페이스를 부여하자

★ 실무고민
- 인터페이스를 도입하면 추상화라는 비용이 발생한다. -> 인터페이스만 보고서는 한눈에 알아보기 힘들고 구현체를 뜯어봐야함
-> 따라서 기능을 확장할 가능성이 없다면 구현체 클래스를 직접 사용하고, 확장 가능성이 있을 때 추후에 리팩토링 하여 인터페이스를 도입하는 것도 방법